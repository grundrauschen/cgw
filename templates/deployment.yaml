apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "CGW.fullname" . }}
  labels:
    app: {{ template "CGW.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "CGW.name" . }}
        release: {{ .Release.Name }}
    spec:
      {{- if .Values.ipsec.hostNetworking }}
      hostNetwork: true
      {{- end }}
      initContainers:
      - name: init-ip
        image: thzpub/vnf-swak-diag
        volumeMounts:
        - name: podshare
          mountPath: /mnt/podshare
        command:
        - bash
        - -c
        - |
          # create dummy interface for ping endpoint
          if [ -n "$LOCAL_PING_ENDPOINT" ]; then
              ip link add dum0 type dummy
              ip addr add $LOCAL_PING_ENDPOINT/32 dev dum0
              ip link set dum0 up
          fi
          #
          # create dummy interface for ping endpoint
          if [ -n "$BGP_ROUTER_ID" ]; then
              ip link add dum1 type dummy
              ip addr add $BGP_ROUTER_ID/32 dev dum1
              ip link set dum1 up
          fi
          echo "Initializer completed."
        env:
        - name: LOCAL_PING_ENDPOINT
          value: "{{ .Values.ipsec.local_ping_endpoint }}"
        securityContext:
          capabilities:
            add: ["NET_ADMIN"]
      {{- if .Values.ipsec.vti_key }}
      - name: init-vti
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        command: ["/usr/local/bin/start-strongswan.sh", "init"]
        env:
        - name: IPSEC_VTI_KEY
          value: "{{ .Values.ipsec.vti_key }}"
#        - name: IPSEC_LOCALIP
#          value: "{{ .Values.ipsec.localip }}"
        - name: IPSEC_VTI_STATICROUTES
          value: "{{ .Values.ipsec.vti_staticroutes }}"
        - name: IPSEC_REMOTEIP
          value: "{{ .Values.ipsec.remoteip }}"
        - name: IPSEC_REMOTENET
          value: "{{ .Values.ipsec.remotenet }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        volumeMounts:
        - mountPath: /lib/modules
          name: host-kernel-modules-volume
        securityContext:
          privileged: true
      {{- end }}

      {{ if .Values.gre.enabled }}
      ##  GRE Tunneling ##
      - name: init-gre
        image: thzpub/vnf-swak-diag
        command:
        - sh
        - -c
        - |
          # create GRE endpoint
          if [ -n "$GRE_LOCALIP" -a -n "$GRE_REMOTEIP" -a -n "$GRE_IFACE" ]; then
            ip link add dum-"$GRE_IFACE" type dummy
            ip addr add $GRE_LOCALIP/32 dev dum-"$GRE_IFACE"
            ip link set dum-"$GRE_IFACE" up
            {{- if .Values.gre.gretap }}
            ip link add "$GRE_IFACE" type gretap remote "$GRE_REMOTEIP" local "$GRE_LOCALIP" ttl 255
            {{- else }}
            ip tunnel add "$GRE_IFACE" mode gre remote "$GRE_REMOTEIP" local "$GRE_LOCALIP" ttl 255
            {{- end }}
            ip link set "$GRE_IFACE" up 
          else
            echo "set gre.localip, gre.remoteip and gre.name in your configuration"
            exit 1
          fi
          exit 0

        env:
        - name: GRE_LOCALIP
          value: "{{ .Values.gre.localip }}"
        - name: GRE_REMOTEIP
          value: "{{ .Values.gre.remoteip }}"
        - name: GRE_IFACE
          value: "{{ .Values.gre.name }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          capabilities:
            add: ["NET_ADMIN"]
      {{ end }}

      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if not .Values.ipsec.hostNetworking }}
        ports:
        - containerPort: 500
          name: u500
          protocol: UDP
        - containerPort: 4500
          name: u4500
          protocol: UDP
        {{- end }}
        env:
        - name: USE_ENV_CONFIG
          value: "{{ .Values.useEnvConfig }}"
        {{- if .Values.ipsec.setDefaultTable }}
        - name: SET_ROUTE_DEFAULT_TABLE
          value: "TRUE"
        {{- else }}
        - name: SET_ROUTE_DEFAULT_TABLE
          value: "FALSE"
        {{- end }}
        - name: IPSEC_LOCALPRIVIP
          value: "{{ .Values.ipsec.localprivip }}"
#        - name: IPSEC_LOCALPUBIP
#          value: "{{ .Values.ipsec.localpubip }}"
        - name: IPSEC_LOCALIP
          value: "{{ .Values.ipsec.localip }}"
        - name: IPSEC_LOCALID
          value: "{{ .Values.ipsec.localid }}"
        - name: IPSEC_LOCALNET
          value: "{{ .Values.ipsec.localnet }}"
        - name: IPSEC_REMOTEIP
          value: "{{ .Values.ipsec.remoteip }}"
        - name: IPSEC_REMOTEID
          value: "{{ .Values.ipsec.remoteid }}"
        - name: IPSEC_REMOTENET
          value: "{{ .Values.ipsec.remotenet }}"
        - name: IPSEC_PSK
        {{- if .Values.ipsec.psk.secret }}
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.ipsec.psk.secret.name }}"
              key: "{{ .Values.ipsec.psk.secret.key }}"
        {{- else }}
          value: "{{ .Values.ipsec.psk.value }}"
        {{- end }}
        - name: IPSEC_KEYEXCHANGE
          value: "{{ .Values.ipsec.keyexchange }}"
        - name: IPSEC_IKECIPHER
          value: "{{ .Values.ipsec.ikecipher }}"
        - name: IPSEC_ESPCIPHER
          value: "{{ .Values.ipsec.espcipher }}"
        - name: IPSEC_FORCEUDP
          value: "{{ .Values.ipsec.forceudp }}"
        - name: IPSEC_IKEREAUTH
          value: "{{ .Values.ipsec.ikereauth }}"
        {{- if .Values.ipsec.vti_key }}
        - name: IPSEC_VTI_KEY
          value: "{{ .Values.ipsec.vti_key }}"
        {{- end }}
        securityContext:
          capabilities:
            add: ["NET_ADMIN"]
        volumeMounts:
        - mountPath: /lib/modules
          name: host-kernel-modules-volume

      - name: ping-prober
        image: alpine:latest
        command:
        - sh
        - -c
        - |
          if [ -z "$REMOTE_PING_ENDPOINT" -o -z "$LOCAL_PING_ENDPOINT" ]; then
            echo "REMOTE_PING_ENDPOINT or LOCAL_PING_ENDPOINT is not set. No probing. Sleeping."
            while sleep 3600; do echo "keep sleeping"; done
            exit 1
          fi
          echo "Starting ping probes."
          while sleep 5; do
            printf "\n\n# ping start - " ; date -Is
            ping -I ${LOCAL_PING_ENDPOINT} -c 3 -w 10 ${REMOTE_PING_ENDPOINT} | tee /mnt/podshare/current-ping.log
            # make it atomic:
            mv /mnt/podshare/current-ping.log /mnt/podshare/last-ping.log
          done

        volumeMounts:
        - name: podshare
          mountPath: /mnt/podshare
        env:
        - name: REMOTE_PING_ENDPOINT
          value: "{{ .Values.ipsec.remote_ping_endpoint }}"
        - name: LOCAL_PING_ENDPOINT
          value: "{{ .Values.ipsec.local_ping_endpoint }}"
      ## VXLAN Connection ##
      {{- if .Values.vxlan.enabled }}
      {{- range $index, $element := .Values.vxlan.connectors }}
      - name: vxlan-connector-{{ $element.name }}
        image: {{ $.Values.vxlan.image }}
        imagePullPolicy: Always
        securityContext:
          capabilities:
            add:
              - NET_ADMIN
        env:
        - name: PEER
          value: "{{ $element.peer }}"
        {{- if $element.bridge }}
        - name: BRIDGE
          value: "{{ $element.bridge }}"
        {{- end }}
        - name: BRIDGED_IFACES
          value: "{{ $element.bridged_ifaces }}"
        {{- if $element.bridge_name }}
        - name: BRIDGE_IFNAME
          value: "{{ $element.bride_name }}"
        {{- end }}
        - name: VXLANID
          value: "{{ $element.id }}"
        {{- if $element.ipaddr }}
        - name: IP_ADDR
          value: "{{ $element.ipaddr }}"
        {{- end }}
        {{- if eq $index 0 }}
        ports:
        - name: port-vxlan
          containerPort: 4789
          protocol: UDP
        {{- end }}
      {{- end }}
      {{- end }}

      volumes:
      - name: host-kernel-modules-volume
        hostPath:
          path: /lib/modules
      - name: podshare
        emptyDir: {}
        
   {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
   {{- end }}


